@page  "/movie/{movieId:int}"
@using SEP6_TEST.Components;
@using SEP6_TEST.ApiAccess
@using SEP6_TEST.ApiModels
@using SEP6_TEST.DbAccess
@using SEP6_TEST.DTO
@using SEP6_TEST.BussinesLogic
@using SEP6_TEST.Enums
@using SEP6_TEST.Models
@inject IMovieAccessInfoApi movieFromApi
@inject IMovieInfoDb movieFromDb
@*@inject IWatchListDb watchList
@inject ILikedMoviesDb likedList*@
@inject IUserDb currentUser
@inject IMovieLogic movieLogic
@*@inject IMovieReviewDb movieReview*@
@inject ILikedMoviesLogic likedMovieLogic
@inject IWacthlistLogic watchMovieLogic
@inject IMovieReviewLogic movieReviewLogic


@if (isLoading == false)
{
    <h1 style="text-align:center">@movie.Movie.Title</h1>
    <h6 style="text-align:center">Directed by @director.name</h6>

    <br />
    <img style="margin-left:auto;margin-right:auto;display:block;border-radius:10px" src="@movie.Movie.Poster" alt="MovieImage" />
    <br />

    <div class="card mx-auto bg-info">
        <div class="card-header text-center">Actors</div>
        <div class="card-body">
            <div class="scrolling-wrapper row flex-row flex-nowrap mx-auto bg-info rounded">


                @foreach (var actor in movieBaseInfo.cast)
                {
                    <div class="col-2">
                        <ActorComponent castMember="actor" />
                    </div>
                }

            </div>
        </div>
        
    </div>

    <br />

    <div class="card bg-info text-white mb-3">
        <h5 class="card-header text-center">Description</h5>
        <h5 class="card-text text-center mb-2 mt-2">@movieBaseInfo.overview</h5>
    </div>

    <br />

    <div class="card bg-info text-white text-center">
        <h5 class="card-header text-center">Rated @Math.Round(@movie.Rating.Rating1, 2) by viewers</h5>
        <div class="card-body">
            <h5 class="card-title text-center">@movie.Rating.Votes ratings in total</h5>
        </div>
        <div class="card-footer w-100 mx-auto">
            <p class="card-text text-center">Your Rating</p>
            <div class="btn-group float-none" role="group" aria-label="First group">
                @for (int i = 1; i <= 10; i++)
                {
                    int voteValue = i;
                    <button type="button" class="btn btn-secondary border-info" @onclick="@(a => RateMovie(voteValue))">@i</button>
                }
            </div>
        </div>
        <p>@test</p>
    </div>

    <br />

    <div style="text-align:center;margin-bottom:10px">
        <div class="btn-group-lg float-none" role="group" aria-label="Second group">
            @if (movieInLikedList == false)
            {
                <button type="button" class="btn btn-warning" @onclick="AddToLiked">Add To Liked</button>
            }
            else
            {
                <button type="button" class="btn btn-warning" @onclick="RemoveFromLiked">Remove from Liked</button>
            }
            @if (movieInWatchlist == false)
            {
                <button type="button" class="btn btn-info" @onclick="AddToWatchList">Add To Watchlist</button>
            }
            else
            {
                <button type="button" class="btn btn-info" @onclick="RemoveFromWatchList">Remove from Watchlist</button>
            }
        </div>
    </div>

    <br />

    <div class="card-columns ">
        @foreach (var r in reviews)
        {
            <div class="card bg-transparent">
                <div class="card-body">
                    <ReviewComponent Review="r">

                    </ReviewComponent>
                </div>
            </div>
        }
    </div>

    <br />

    <div class="card text-center bg-info overflow-auto w-100 mb-3" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">Voice your opinion!</h5>

            <div class="form-text">
                <textarea class="form-control" id="FormControlTextarea" placeholder="Write your review" rows="3" @bind="reviewText"></textarea>
            </div>
            <a class="btn btn-primary mt-2" @onclick="SubmitReview">Submit Review</a>

        </div>
    </div>
}
else
{
    <span>Loading...</span>
}



@code {
    [Parameter] public int movieId { get; set; }
    public MovieDTO movie { get; set; }
    public List<MovieReview> reviews { get; set; } = new List<MovieReview>();
    private MovieBaseInfo movieBaseInfo { get; set; } = new MovieBaseInfo();
    private CrewMember director = new CrewMember();

    private bool isLoading = false;
    private bool movieInWatchlist = false;
    private bool movieInLikedList = false;

    private string reviewText = "";

    private string test = "";

    protected async override Task OnInitializedAsync()
    {
        isLoading = true;
        movie = await movieFromDb.getMovieByID(movieId);
        await movieFromApi.GetAllMovieInfo(movieId);
        movieBaseInfo = movieFromApi.movieBaseInfo;
        reviews = await movieReviewLogic.getAllMovieReviews(movieId);
        director = movieBaseInfo.crew.FirstOrDefault(i => i.job.Equals(CrewJobs.Director.ToString()));
        if(director == null)
        {
            director = new CrewMember();
        }

        movieInWatchlist = watchMovieLogic.isMovieWatchlistInDB(movieId);
        movieInLikedList = likedMovieLogic.isMovieInLikedDB(movieId);

        isLoading = false;
    }


    private void AddToLiked()
    {
        likedMovieLogic.addMoviesToLiked(currentUser.user.Username, movieId);
        movieInLikedList = likedMovieLogic.isMovieInLikedDB(movieId);
    }

    private void AddToWatchList()
    {

        watchMovieLogic.addMovieToWatchlist(currentUser.user.Username, movieId);
        movieInWatchlist = likedMovieLogic.isMovieInLikedDB(movieId);
    }

    private void RemoveFromLiked()
    {
        likedMovieLogic.deleteMoviesFromLiked(currentUser.user.Username, movieId);
        movieInLikedList = likedMovieLogic.isMovieInLikedDB(movieId);
    }

    private void RemoveFromWatchList()
    {
        watchMovieLogic.removeMovieFromWatchlist(currentUser.user.Username, movieId);
        movieInWatchlist = watchMovieLogic.isMovieWatchlistInDB(movieId);
    }

    private async Task RateMovie(int rate)
    {
        movie = await movieLogic.updateVotesAndRating(movie, rate);
        test = $"You rated the movied with {rate}";
    }

    private async Task SubmitReview()
    {
        movieReviewLogic.addNewReview(currentUser.user.Username, movieId, reviewText);
        reviews = await movieReviewLogic.getAllMovieReviews(movieId);
        reviewText = "";
    }
}


