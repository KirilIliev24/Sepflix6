@page  "/movie/{movieId:int}"
@using SEP6_TEST.Components;
@using SEP6_TEST.ApiAccess
@using SEP6_TEST.ApiModels
@using SEP6_TEST.DbAccess
@using SEP6_TEST.DTO
@using SEP6_TEST.BussinesLogic
@using SEP6_TEST.Enums
@inject IMovieAccessInfoApi movieFromApi
@inject IMovieInfoDb movieFromDb
@inject IWatchListDb watchList
@inject ILikedMoviesDb likedList
@inject IUserDb currentUser
@inject IMovieLogic movieLogic

<h1 style="text-align:center">@MovieTitle</h1>
<h6 style="text-align:center">Directed by @Director</h6>

<br />
<img style="margin-left:auto;margin-right:auto;display: block;" src="/Images/diesel.png" alt="MovieImage" />
<br />


<div class="card bg-info text-white">
    <h5 class="card-header text-center ">Actors</h5>
    <h5 class="card-text text-center mb-2 mt-2">@Actors</h5>
</div>

<br />

<div class="card bg-info text-white mb-3">
    <h5 class="card-header text-center">Description</h5>
    <h5 class="card-text text-center mb-2 mt-2">@MovieDesc</h5>
</div>

<br />

<div class="card bg-info text-white align-items-center">
    <h5 class="card-header text-center">Rated @Rating by viewers</h5>
    <div class="card-body">
        <h5 class="card-title text-center">@Votes ratings in total</h5>

        <div class="card-footer">
            <p class="card-text text-center">Your Rating</p>
            <div class="btn-group float-none" role="group" aria-label="First group">
                @for (int i = 1; i <= 10; i++)
                {
                    <button type="button" class="btn btn-secondary border-info" @onclick="@(a => RateMovie(i))">@i</button>
                }
                @*<button type="button" class="btn btn-secondary border-info">1</button>
                <button type="button" class="btn btn-secondary border-info">2</button>
                <button type="button" class="btn btn-secondary border-info">3</button>
                <button type="button" class="btn btn-secondary border-info">4</button>
                <button type="button" class="btn btn-secondary border-info">5</button>
                <button type="button" class="btn btn-secondary border-info">6</button>
                <button type="button" class="btn btn-secondary border-info">7</button>
                <button type="button" class="btn btn-secondary border-info">8</button>
                <button type="button" class="btn btn-secondary border-info">9</button>
                <button type="button" class="btn btn-secondary border-info">10</button>*@
            </div>
        </div>

    </div>
</div>



<br />

<div style="text-align:center;margin-bottom:10px">
    <div class="btn-group-lg float-none" role="group" aria-label="Second group">
        @if (movieInLikedList == false)
        {
            <button type="button" class="btn btn-warning" @onclick="AddToLiked">Add To Liked</button>
        }
        else
        {
            <button type="button" class="btn btn-warning" @onclick="RemoveFromLiked">Remove from Liked</button>
        }
        @if (movieInWatchlist == false)
        {
            <button type="button" class="btn btn-info" @onclick="AddToWatchList">Add To Watchlist</button>
        }
        else
        {
            <button type="button" class="btn btn-info" @onclick="RemoveFromWatchList">Remove from Watchlist</button>
        }
    </div>
</div>

<br />

<div class="card-columns ">
    <div class="card bg-transparent">
        <div class="card-body">
            <ReviewComponent>

            </ReviewComponent>
        </div>
    </div>
    <div class="card bg-transparent">
        <div class="card-body">
            <ReviewComponent>

            </ReviewComponent>
        </div>
    </div>
    <div class="card bg-transparent">
        <div class="card-body">
            <ReviewComponent>

            </ReviewComponent>
        </div>
    </div>
    <div class="card bg-transparent">
        <div class="card-body w-100">
            <ReviewComponent>

            </ReviewComponent>
        </div>
    </div>
    <div class="card bg-transparent">
        <div class="card-body">
            <ReviewComponent>

            </ReviewComponent>
        </div>
    </div>
</div>

<br />

<div class="card text-center bg-info overflow-auto w-100 mb-3" style="width: 18rem;">
    <div class="card-body">
        <h5 class="card-title">Voice your opinion!</h5>

        <div class="form-text">
            <textarea class="form-control" id="FormControlTextarea" placeholder="Write your review" rows="3"></textarea>
        </div>
        <a href="#" class="btn btn-primary mt-2">Submit Review</a>

    </div>
</div>


@code {
    [Parameter] public int movieId { get; set; }
    private MovieDTO movie { get; set; }
    private MovieBaseInfo movieBaseInfo { get; set; } = new MovieBaseInfo();
    private CrewMember director;

    private bool isLoading = false;
    private bool movieInWatchlist = false;
    private bool movieInLikedList = false;

    string MovieTitle = "MovieTitle";
    string MovieDesc = "Following the events of 'Avengers: Endgame,' Sam Wilson/Falcon and Bucky Barnes/Winter Soldier team up in a global adventure that tests their abilities -- and their patience.";
    string Actors = "Bob, roocs, aosndlaskn, ,asndlknkfa, ,as";
    string Director = "Harambe";
    string Rating = "5.6";
    string Votes = "321";

    protected async override Task OnInitializedAsync()
    {
        isLoading = true;
        movie = await movieFromDb.getMovieByID(movieId);
        await movieFromApi.GetAllMovieInfo(movieId);
        movieBaseInfo = movieFromApi.movieBaseInfo;

        director = movieBaseInfo.crew.FirstOrDefault(i => i.job.Equals(CrewJobs.Director.ToString()));

        movieInWatchlist = watchList.IsMovieInWatchlist(movieId);
        movieInLikedList = likedList.IsMovieInLikedlist(movieId);

        isLoading = false;
    }

    //add methods for whatchlist and favorite and set the buttons to active only if the movies are not added
    private void AddToLiked()
    {
        likedList.addMovieToLiked(currentUser.user.Username, movieId);
    }

    private void AddToWatchList()
    {
        watchList.addMovieToWatchlist(currentUser.user.Username, movieId);
    }

    private void RemoveFromLiked()
    {
        likedList.deleteALikedMovie(currentUser.user.Username, movieId);
    }

    private void RemoveFromWatchList()
    {
        watchList.removeMovieFromWatchList(currentUser.user.Username, movieId);
    }

    private void RateMovie(int rate)
    {
        movieLogic.updateVotesAndRating(movie, rate);
    }
}
