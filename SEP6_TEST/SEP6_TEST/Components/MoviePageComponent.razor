@page  "/movie/{movieId:int}"
@using SEP6_TEST.Components;
@using SEP6_TEST.ApiAccess
@using SEP6_TEST.ApiModels
@using SEP6_TEST.DbAccess
@using SEP6_TEST.DTO
@using SEP6_TEST.BussinesLogic
@using SEP6_TEST.Enums
@using SEP6_TEST.Models
@inject IMovieAccessInfoApi movieFromApi
@inject IMovieInfoDb movieFromDb
@inject IUserDb currentUser
@inject IMovieLogic movieLogic
@inject ILikedMoviesLogic likedMovieLogic
@inject IWacthlistLogic watchMovieLogic
@inject IMovieReviewLogic movieReviewLogic
@inject IUserRatingLogic userRating


@if (isLoading == false)
{
    <h1 style="text-align:center">@movie.Movie.Title</h1>

    @if (!string.IsNullOrEmpty(director.name))
    {
        <h6 style="text-align:center">Directed by @director.name</h6>
    }

    <br />

    @if (!movie.Movie.Poster.Equals("https://image.tmdb.org/t/p/w500/"))
    {
        if (movie.Movie.Poster.Equals(""))
        {
            <img style="margin-left:auto;margin-right:auto;display: block;border-radius:10px" src="/Images/image.png" alt="MovieImagenotgot" />
        }
        else
        {
            <img style="margin-left:auto;margin-right:auto;display: block;border-radius:10px" src="@movie.Movie.Poster" alt="MovieImagegot" />
        }
    }
    else
    {
        <img style="margin-left:auto;margin-right:auto;display: block;border-radius:10px" src="/Images/image.png" alt="MovieImagenotgot" />
    }

    <br />



    @if (directorsUrl.Equals("https://image.tmdb.org/t/p/w500/") && movieBaseInfo.cast.Count() == 0)
    {

    }
    else
    {

        <div class="card mx-auto bg-info">
            <div class="card-header text-center">Actors</div>
            <div class="card-body">
                <div class="scrolling-wrapper row flex-row flex-nowrap mx-auto bg-info rounded">

                    <div class="col-2" @onclick="@(a => SeePersonBio(director.id))">
                        <div class="card text-white bg-transparent border-0 mt-3" style="width: 9rem;">

                            @if (!directorsUrl.Equals("https://image.tmdb.org/t/p/w500/"))
                            {
                                <img class="card-img-top rounded" src="@directorsUrl" alt="Direcors Image">
                            }
                            else
                            {
                                <img class="card-img-top rounded w-auto h-auto" src="/Images/image.png" alt="Direcors Image">
                            }

                            <div class="card-body pt-1 pl-1">
                                <h5 class="card-title text-wrap">@director.name</h5>
                                <h6 class="text-muted text-wrap">@director.job</h6>
                            </div>
                        </div>
                    </div>
                    @foreach (var actor in movieBaseInfo.cast)
                    {
                        <div class="col-2" @onclick="@(a => SeePersonBio(actor.id))">
                            <ActorComponent castMember="actor" />
                        </div>
                    }

                </div>
            </div>

        </div>
    }



    <br />

    @if (!string.IsNullOrEmpty(movieBaseInfo.overview))
    {
        <div class="card bg-info text-white mb-3">
            <h5 class="card-header text-center">Description</h5>

            <h5 class="card-body">@movieBaseInfo.overview</h5>
        </div>
    }

    <br />

    <div class="card bg-info text-white text-center">
        <h5 class="card-header text-center">Rated @Math.Round(@movie.Rating.Rating1, 2) by viewers</h5>
        <div class="card-body">
            <h5 class="card-title text-center">@movie.Rating.Votes ratings in total</h5>
        </div>
        <div class="card-footer w-100 mx-auto">
            <p class="card-text text-center">Your Rating</p>
            <div class="btn-group float-none" role="group" aria-label="First group">
                @if (hasUserVoted == true)
                {
                    @for (int i = 1; i <= 10; i++)
                    {
                        int voteValue = i;
                        if (userRatingVote == i)
                        {
                            <button id="votedButton" disabled="@hasUserVoted" type="button" class="btn btn-secondary border-info" @onclick="@(a => RateMovie(voteValue))">@i</button>

                        }
                        else
                        {
                            <button disabled="@hasUserVoted" type="button" class="btn btn-secondary border-info" @onclick="@(a => RateMovie(voteValue))">@i</button>
                        }
                    }
                }
                else
                {
                    @for (int i = 1; i <= 10; i++)
                    {
                        int voteValue = i;
                        <button type="button" class="btn btn-secondary border-info" @onclick="@(a => RateMovie(voteValue))">@i</button>
                    }
                }

            </div>
            @if (hasUserVoted == true)
            {
                <p>You rated this movie with @userRatingVote</p>
            }
        </div>
        <p>@test</p>
    </div>

    <br />

    <div style="text-align:center;margin-bottom:10px">
        <div class="btn-group-lg float-none" role="group" aria-label="Second group">
            @if (movieInLikedList == false)
            {
                <button type="button" class="btn btn-warning" @onclick="AddToLiked">Add To Liked</button>
            }
            else
            {
                <button type="button" class="btn btn-warning" @onclick="RemoveFromLiked">Remove from Liked</button>
            }
            @if (movieInWatchlist == false)
            {
                <button type="button" class="btn btn-info" @onclick="AddToWatchList">Add To Watchlist</button>
            }
            else
            {
                <button type="button" class="btn btn-info" @onclick="RemoveFromWatchList">Remove from Watchlist</button>
            }
        </div>
    </div>

    <br />

    <div class="card-columns ">
        @foreach (var r in reviews)
        {
            <div class="card bg-transparent">
                <div class="card-body">
                    <ReviewComponent Review="r">

                    </ReviewComponent>
                </div>
            </div>
        }
    </div>

    <br />

    <div class="card text-center bg-info overflow-auto w-100 mb-3" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">Voice your opinion!</h5>

            <div class="form-text">
                <textarea class="form-control" id="FormControlTextarea" placeholder="Write your review" rows="3" @bind="reviewText"></textarea>
            </div>
            <a class="btn btn-primary mt-2" @onclick="SubmitReview">Submit Review</a>

        </div>
    </div>
}
else
{
    <span>Loading...</span>
}



@code {
    [Parameter] public int movieId { get; set; }
    public MovieDTO movie { get; set; }
    public List<MovieReview> reviews { get; set; } = new List<MovieReview>();
    private MovieBaseInfo movieBaseInfo { get; set; } = new MovieBaseInfo();
    private CrewMember director = new CrewMember();
    private string directorsUrl;

    int userRatingVote;

    private bool isLoading = false;
    private bool movieInWatchlist = false;
    private bool movieInLikedList = false;
    private bool hasUserVoted = false;

    private string reviewText = "";

    private string test = "";

    protected async override Task OnInitializedAsync()
    {
        isLoading = true;
        movie = await movieFromDb.getMovieByID(movieId);
        await movieFromApi.GetAllMovieInfo(movieId);
        movieBaseInfo = movieFromApi.movieBaseInfo;
        reviews = await movieReviewLogic.getAllMovieReviews(movieId);
        director = movieBaseInfo.crew.FirstOrDefault(i => i.job.Equals(CrewJobs.Director.ToString()));
        if (director == null)
        {
            director = new CrewMember();
        }
        directorsUrl = $"https://image.tmdb.org/t/p/w500/{director.profile_path}";

        userRatingVote = userRating.getUserRating(currentUser.user.Username, movieId);
        if (userRatingVote != 0)
        {
            hasUserVoted = true;
        }
        else
        {
            hasUserVoted = false;
        }
        movieInWatchlist = watchMovieLogic.isMovieWatchlistInDB(movieId);
        movieInLikedList = likedMovieLogic.isMovieInLikedDB(movieId);

        isLoading = false;
    }


    private void AddToLiked()
    {
        likedMovieLogic.addMoviesToLiked(currentUser.user.Username, movieId);
        movieInLikedList = likedMovieLogic.isMovieInLikedDB(movieId);
    }

    private void AddToWatchList()
    {

        watchMovieLogic.addMovieToWatchlist(currentUser.user.Username, movieId);
        movieInWatchlist = likedMovieLogic.isMovieInLikedDB(movieId);
    }

    private void RemoveFromLiked()
    {
        likedMovieLogic.deleteMoviesFromLiked(currentUser.user.Username, movieId);
        movieInLikedList = likedMovieLogic.isMovieInLikedDB(movieId);
    }

    private void RemoveFromWatchList()
    {
        watchMovieLogic.removeMovieFromWatchlist(currentUser.user.Username, movieId);
        movieInWatchlist = watchMovieLogic.isMovieWatchlistInDB(movieId);
    }

    private async Task RateMovie(int rate)
    {
        movie = await movieLogic.updateVotesAndRating(movie, rate);
        hasUserVoted = userRating.addUserRating(currentUser.user.Username, movieId, rate);
        userRatingVote = rate;
        //test = $"You rated the movied with {rate}";
    }

    private async Task SubmitReview()
    {
        movieReviewLogic.addNewReview(currentUser.user.Username, movieId, reviewText);
        reviews = await movieReviewLogic.getAllMovieReviews(movieId);
        reviewText = "";
    }

    private void SeePersonBio(int id)
    {
        NavigationManager.NavigateTo($"/person/{id}");
    }
}


<style>
    #votedButton {
        background-color: rgba(253, 52, 52, 0.74);
        color: white;
    }
</style>